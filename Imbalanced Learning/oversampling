{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"EctwFEpXY4cj"},"outputs":[],"source":["%matplotlib inline\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","\n","from collections import Counter\n","from collections import defaultdict"]},{"cell_type":"code","source":["# mont Google drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V3G6O2T8CMd5","executionInfo":{"status":"ok","timestamp":1680597499594,"user_tz":-120,"elapsed":19774,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"3ec466bc-f521-4ddd-f35f-09084dd0093c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["df_data_train = pd.read_excel(\"drive/MyDrive/Progetto Data Mining 2/CODICE PROGETTO/Outliers/DATASET NO OUTLIERS/df_prep_TRAIN_no_outliers.xlsx\", index_col=\"Unnamed: 0\")\n","df_info_train = pd.read_excel(\"drive/MyDrive/Progetto Data Mining 2/CODICE PROGETTO/Outliers/DATASET NO OUTLIERS/df_prep_info_TRAIN_no_outliers.xlsx\", index_col=\"Unnamed: 0\")\n","X_train = df_data_train.values\n","y_train = df_info_train['vocal_channel']\n","\n","df_data_test = pd.read_excel(\"drive/MyDrive/Progetto Data Mining 2/CODICE PROGETTO/Outliers/DATASET NO OUTLIERS/df_prep_TEST_no_outliers.xlsx\", index_col=\"Unnamed: 0\")\n","df_info_test = pd.read_excel(\"drive/MyDrive/Progetto Data Mining 2/CODICE PROGETTO/Outliers/DATASET NO OUTLIERS/df_prep_info_TEST_no_outliers.xlsx\", index_col=\"Unnamed: 0\")\n","X_test = df_data_test.values\n","y_test = df_info_test['vocal_channel']"],"metadata":{"id":"l95o1-LtY9aG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_info_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"mJb1lGHBK4rz","executionInfo":{"status":"ok","timestamp":1680597510260,"user_tz":-120,"elapsed":31,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"d181ea35-e6eb-4da4-ad45-f8f985fc9005"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     vocal_channel    emotion emotional_intensity  \\\n","0           speech    neutral              normal   \n","1           speech    neutral              normal   \n","2           speech    neutral              normal   \n","3           speech    neutral              normal   \n","4           speech       calm              normal   \n","...            ...        ...                 ...   \n","1773        speech  surprised              normal   \n","1774        speech  surprised              strong   \n","1775        speech  surprised              strong   \n","1776        speech  surprised              strong   \n","1777        speech  surprised              strong   \n","\n","                         statement repetition  actor sex  \\\n","0     Kids are talking by the door        1st      1   M   \n","1     Kids are talking by the door        2nd      1   M   \n","2     Dogs are sitting by the door        1st      1   M   \n","3     Dogs are sitting by the door        2nd      1   M   \n","4     Kids are talking by the door        1st      1   M   \n","...                            ...        ...    ...  ..   \n","1773  Dogs are sitting by the door        2nd     18   F   \n","1774  Kids are talking by the door        1st     18   F   \n","1775  Kids are talking by the door        2nd     18   F   \n","1776  Dogs are sitting by the door        1st     18   F   \n","1777  Dogs are sitting by the door        2nd     18   F   \n","\n","                      filename  frame_count  \n","0     03-01-01-01-01-01-01.wav       158558  \n","1     03-01-01-01-01-02-01.wav       160160  \n","2     03-01-01-01-02-01-01.wav       156956  \n","3     03-01-01-01-02-02-01.wav       152152  \n","4     03-01-02-01-01-01-01.wav       169769  \n","...                        ...          ...  \n","1773  03-01-08-01-02-02-18.wav       168168  \n","1774  03-01-08-02-01-01-18.wav       174575  \n","1775  03-01-08-02-01-02-18.wav       169770  \n","1776  03-01-08-02-02-01-18.wav       185786  \n","1777  03-01-08-02-02-02-18.wav       174574  \n","\n","[1778 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-ee7f88b6-90f1-453e-82a7-f3e06c3fb29e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>vocal_channel</th>\n","      <th>emotion</th>\n","      <th>emotional_intensity</th>\n","      <th>statement</th>\n","      <th>repetition</th>\n","      <th>actor</th>\n","      <th>sex</th>\n","      <th>filename</th>\n","      <th>frame_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>speech</td>\n","      <td>neutral</td>\n","      <td>normal</td>\n","      <td>Kids are talking by the door</td>\n","      <td>1st</td>\n","      <td>1</td>\n","      <td>M</td>\n","      <td>03-01-01-01-01-01-01.wav</td>\n","      <td>158558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>speech</td>\n","      <td>neutral</td>\n","      <td>normal</td>\n","      <td>Kids are talking by the door</td>\n","      <td>2nd</td>\n","      <td>1</td>\n","      <td>M</td>\n","      <td>03-01-01-01-01-02-01.wav</td>\n","      <td>160160</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>speech</td>\n","      <td>neutral</td>\n","      <td>normal</td>\n","      <td>Dogs are sitting by the door</td>\n","      <td>1st</td>\n","      <td>1</td>\n","      <td>M</td>\n","      <td>03-01-01-01-02-01-01.wav</td>\n","      <td>156956</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>speech</td>\n","      <td>neutral</td>\n","      <td>normal</td>\n","      <td>Dogs are sitting by the door</td>\n","      <td>2nd</td>\n","      <td>1</td>\n","      <td>M</td>\n","      <td>03-01-01-01-02-02-01.wav</td>\n","      <td>152152</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>speech</td>\n","      <td>calm</td>\n","      <td>normal</td>\n","      <td>Kids are talking by the door</td>\n","      <td>1st</td>\n","      <td>1</td>\n","      <td>M</td>\n","      <td>03-01-02-01-01-01-01.wav</td>\n","      <td>169769</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1773</th>\n","      <td>speech</td>\n","      <td>surprised</td>\n","      <td>normal</td>\n","      <td>Dogs are sitting by the door</td>\n","      <td>2nd</td>\n","      <td>18</td>\n","      <td>F</td>\n","      <td>03-01-08-01-02-02-18.wav</td>\n","      <td>168168</td>\n","    </tr>\n","    <tr>\n","      <th>1774</th>\n","      <td>speech</td>\n","      <td>surprised</td>\n","      <td>strong</td>\n","      <td>Kids are talking by the door</td>\n","      <td>1st</td>\n","      <td>18</td>\n","      <td>F</td>\n","      <td>03-01-08-02-01-01-18.wav</td>\n","      <td>174575</td>\n","    </tr>\n","    <tr>\n","      <th>1775</th>\n","      <td>speech</td>\n","      <td>surprised</td>\n","      <td>strong</td>\n","      <td>Kids are talking by the door</td>\n","      <td>2nd</td>\n","      <td>18</td>\n","      <td>F</td>\n","      <td>03-01-08-02-01-02-18.wav</td>\n","      <td>169770</td>\n","    </tr>\n","    <tr>\n","      <th>1776</th>\n","      <td>speech</td>\n","      <td>surprised</td>\n","      <td>strong</td>\n","      <td>Dogs are sitting by the door</td>\n","      <td>1st</td>\n","      <td>18</td>\n","      <td>F</td>\n","      <td>03-01-08-02-02-01-18.wav</td>\n","      <td>185786</td>\n","    </tr>\n","    <tr>\n","      <th>1777</th>\n","      <td>speech</td>\n","      <td>surprised</td>\n","      <td>strong</td>\n","      <td>Dogs are sitting by the door</td>\n","      <td>2nd</td>\n","      <td>18</td>\n","      <td>F</td>\n","      <td>03-01-08-02-02-02-18.wav</td>\n","      <td>174574</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1778 rows Ã— 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee7f88b6-90f1-453e-82a7-f3e06c3fb29e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ee7f88b6-90f1-453e-82a7-f3e06c3fb29e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ee7f88b6-90f1-453e-82a7-f3e06c3fb29e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["np.unique(df_info_train['vocal_channel'], return_counts=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VdyupSMML2M3","executionInfo":{"status":"ok","timestamp":1680597510261,"user_tz":-120,"elapsed":27,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"58845967-0d24-4c92-9fd3-135227156b5a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array(['song', 'speech'], dtype=object), array([ 732, 1046]))"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["rows2remove = np.random.choice(df_info_train[df_info_train['vocal_channel'] == \"song\"].index, 732 - 55, replace=False)"],"metadata":{"id":"fI6s5UPHKYaP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rows2remove"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gDGQIaaUMtvA","executionInfo":{"status":"ok","timestamp":1680597510261,"user_tz":-120,"elapsed":21,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"27bad73b-c195-408b-bc66-e4906db8c992"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1599,  906,  807,  878, 1184,  198,  297, 1513,  179,  371,  792,\n","        268, 1388,  777,  167,   65, 1321,  277,  181,   99,  200,  570,\n","       1414, 1611, 1489, 1402, 1714,  362,  806, 1088,  568,  484,  772,\n","       1708, 1309, 1294,  593,  977, 1181, 1093, 1306, 1413, 1113, 1615,\n","         74,  880, 1001, 1684,  987, 1083,  789, 1625,  791,  572,  999,\n","       1616,  699, 1216,  496, 1499,  283, 1405,  997,  910,  265, 1386,\n","        301,  578, 1407,  382, 1522,  703, 1592, 1701,  577, 1385, 1681,\n","        662,  464,  370,  188,  678,   63, 1491, 1324,  388, 1586,  193,\n","        581,  369,  387,  178, 1319, 1687, 1198,   67, 1092,  988,  702,\n","        468, 1500, 1010, 1604,  383,  804,  101, 1105, 1084,  185,  797,\n","       1008, 1509, 1510,  364, 1423,  503, 1180, 1110,  885, 1313, 1710,\n","        285,  795,  267,  295,  978,  191, 1415, 1607,  872, 1584,   89,\n","       1111, 1699,  582, 1300,  187,  374,  992,   60,  776,  600, 1496,\n","       1627, 1705,  480,  492, 1497, 1009, 1588, 1096, 1399,   97,  182,\n","        778,  472,  788,  164, 1085,   79, 1282,  784, 1002,   77,  679,\n","        993,  785,  567, 1709, 1197,  774,  361, 1624,  873,  379, 1199,\n","         78,  100, 1715,  562,  171, 1713,  798,  909,  172, 1600, 1086,\n","        769,  269, 1196, 1214,  372,  270,  766,  696, 1418,  984, 1688,\n","        168,  900, 1286, 1602, 1483, 1117,  599,  975, 1220, 1395, 1707,\n","        907,  488, 1078, 1203,   64,  278,   84,  990, 1285, 1014, 1514,\n","       1109,   71,  901, 1420,   59,  501,  701, 1593, 1394,  680,  483,\n","       1195,  705, 1521,  989, 1287, 1288,  166,  783,  378,  276, 1626,\n","       1081, 1398, 1005,  697,  497,  591,  786, 1426,  684, 1512,   66,\n","       1310,  465, 1408,  493,  391, 1493, 1702,  197,  580,  685,  489,\n","       1686,  770, 1098, 1508, 1291,  904, 1484, 1486, 1320,  980, 1003,\n","        972,  398,  291,  475, 1590,  275, 1323,  273,  201, 1302,   70,\n","        994,  470,   80,  868,  893,  876,  474, 1212,  163, 1482,  360,\n","         75,   88,  897,  573, 1519, 1103,  693,  294, 1518, 1201,  664,\n","        394,  298,  889,   86,  292,  773, 1011,  667, 1501, 1089,  998,\n","       1503, 1303, 1194,  869, 1315,  576,  903,  779,  583,  396,  176,\n","       1417,  603,  477,  775, 1621,  479, 1188,  891, 1112,  892,  206,\n","         81, 1205, 1013,  486,  768,   72,  691, 1504, 1200, 1406,  871,\n","        481,  196,  386, 1685,  982, 1391, 1507, 1102,  279,  381,  288,\n","        184, 1506, 1116, 1312,  673, 1523, 1215,  189,  601,  389,  598,\n","         98,  894,   92, 1191,  365,  482,  563, 1706,  681, 1284,  704,\n","        602,  363,  881,  395, 1218,   96,  566, 1387,  284,  688,  385,\n","        690,  986, 1700, 1589,   91, 1077,  596,  366,  597, 1703, 1384,\n","       1690,  888, 1421, 1100, 1217,   61,  983,  782,   90,  390, 1683,\n","        589,  190, 1082, 1297,  896,  884, 1390, 1585,   95, 1605, 1403,\n","       1619, 1613,  595,  668,  461, 1498,  899, 1318, 1213, 1087,  787,\n","       1392, 1190,  400,  286,  674,  908,  979,  401, 1617, 1481, 1106,\n","        359,   69, 1485,  169, 1004,  686, 1425,  282,  874, 1108, 1612,\n","        579,  875, 1210, 1717,  890,  392, 1689,  663, 1308,  289,  794,\n","       1492,  799, 1207,  675,  467,  174,  803, 1505,  195, 1289,  682,\n","        377, 1076, 1208, 1293, 1206,  902, 1283, 1608, 1209, 1187,   85,\n","       1296,  173,  500, 1301, 1409,   62,  780,  397, 1118,  808, 1623,\n","       1411,  669,  561,  665, 1704,  376, 1416,  689,  781,  186,  281,\n","       1682,  911,  796,  571,  375,  698,  898, 1597,  368, 1012,  700,\n","        996, 1185,  205,  886, 1692, 1404, 1698,  569, 1591,  985,  177,\n","        170,  293, 1422,  495,  671,  991,  801,   87,  687,  692,  905,\n","       1101,  471, 1594, 1298, 1610, 1221, 1587,   94, 1622,  677, 1219,\n","        683,   82,  463, 1211,  802, 1311, 1424, 1182,  672,  476,  666,\n","       1115, 1598,  485, 1488, 1091,  586,  183,  180, 1099,  462,  266,\n","        274,  299,  670, 1299,  879,  981, 1178, 1006,  592,  882, 1389,\n","        203, 1393,  199, 1410, 1718, 1595, 1487,  676, 1400, 1601,  287,\n","        870,  487, 1516,  469, 1107,  290,  588,  565, 1000, 1304,  296,\n","       1322,  800,  585, 1097, 1007,  165, 1094,  790,  175, 1186, 1179,\n","        883, 1712,  393,  575, 1502,  974,  498, 1202,  767, 1596,  895,\n","       1697,  272, 1412,  102, 1090, 1281, 1080, 1183,  564,  367,  694,\n","       1511, 1307,  204, 1396,  805, 1620,   83, 1292,  695, 1609,  399,\n","       1695, 1618, 1295,  590,  594, 1095, 1401, 1317,  202,  192,  587,\n","       1075,  976,  491, 1711, 1691, 1716])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df2_info = df_info_train.drop(index=rows2remove, axis=0)\n","df2_data = df_data_train.drop(index=rows2remove, axis=0)\n","np.unique(df2_info['vocal_channel'], return_counts=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oaJnPf0zM3Qi","executionInfo":{"status":"ok","timestamp":1680597510262,"user_tz":-120,"elapsed":19,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"1cee6b04-d506-413c-a2e8-28e2d258ab23"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array(['song', 'speech'], dtype=object), array([  55, 1046]))"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["#Oversampling su song"],"metadata":{"id":"jB7OsMU2N6TN"}},{"cell_type":"markdown","source":[],"metadata":{"id":"VJ_KvlaaN9lZ"}},{"cell_type":"code","source":[],"metadata":{"id":"9GQoACckVs8k"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GjW0yXrx1Fht"},"source":["# Classification"]},{"cell_type":"code","source":["!pip install scikitplot"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N4M3uCeeXbM3","executionInfo":{"status":"ok","timestamp":1680597512080,"user_tz":-120,"elapsed":1829,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"85146035-e026-4785-fa33-cf483cfc6d21"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","\u001b[31mERROR: Could not find a version that satisfies the requirement scikitplot (from versions: none)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for scikitplot\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K7hiEKd9VXyI"},"outputs":[],"source":["from sklearn.dummy import DummyClassifier\n","\n","from sklearn.model_selection import train_test_split, cross_val_score \n","\n","from sklearn.metrics import accuracy_score, f1_score, classification_report\n","from sklearn.metrics import roc_curve, auc, roc_auc_score"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_m7uaDWPVXyI","outputId":"70ddba7a-37f8-4c4d-c76d-c920b5d8ee7c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680597514239,"user_tz":-120,"elapsed":28,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy 0.5614617940199336\n","F1-score [0.         0.71914894]\n","              precision    recall  f1-score   support\n","\n","        song       0.00      0.00      0.00       264\n","      speech       0.56      1.00      0.72       338\n","\n","    accuracy                           0.56       602\n","   macro avg       0.28      0.50      0.36       602\n","weighted avg       0.32      0.56      0.40       602\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["clf = DummyClassifier()\n","clf.fit(X_train, y_train)\n","\n","y_pred0 = clf.predict(X_test)\n","\n","print('Accuracy %s' % accuracy_score(y_test, y_pred0))\n","print('F1-score %s' % f1_score(y_test, y_pred0, average=None))\n","print(classification_report(y_test, y_pred0))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XhnKLcqVVXyI","outputId":"5318c881-4a96-48d6-fe76-342e4f85d3cd","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"error","timestamp":1680597514240,"user_tz":-120,"elapsed":25,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}}},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-3db18bfa55aa>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0my_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplot_roc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'plot_roc' is not defined"]}],"source":["y_score = clf.predict_proba(X_test)\n","plot_roc(y_test, y_score)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x8uleYAi1Fht"},"outputs":[],"source":["from sklearn.tree import DecisionTreeClassifier"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yOsfZ1wE1Fhu","outputId":"2953e64a-e1a5-43e4-cbb2-2edb5f69a15a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680597521508,"user_tz":-120,"elapsed":670,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy 0.915282392026578\n","F1-score [0.90876565 0.92093023]\n","              precision    recall  f1-score   support\n","\n","        song       0.86      0.96      0.91       264\n","      speech       0.97      0.88      0.92       338\n","\n","    accuracy                           0.92       602\n","   macro avg       0.91      0.92      0.91       602\n","weighted avg       0.92      0.92      0.92       602\n","\n"]}],"source":["clf = DecisionTreeClassifier(min_samples_leaf=3, random_state=42)\n","clf.fit(X_train, y_train)\n","\n","y_pred0 = clf.predict(X_test)\n","\n","print('Accuracy %s' % accuracy_score(y_test, y_pred0))\n","print('F1-score %s' % f1_score(y_test, y_pred0, average=None))\n","print(classification_report(y_test, y_pred0))"]},{"cell_type":"markdown","metadata":{"id":"qdStW1JnVXyR"},"source":["### ADASYN"]},{"cell_type":"code","source":["from imblearn.over_sampling import ADASYN"],"metadata":{"id":"OxVuqqLBVkAG"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zBar6hYlVXyR","outputId":"985a98ad-00e4-4b75-8ffe-9fd813c089df","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680597525883,"user_tz":-120,"elapsed":540,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Resampled dataset shape Counter({'speech': 1046, 'song': 1030})\n"]}],"source":["ada = ADASYN(random_state=42)\n","X_res, y_res = ada.fit_resample(X_train, y_train)\n","print('Resampled dataset shape %s' % Counter(y_res))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"THUAOP0F1Fh0"},"outputs":[],"source":["from sklearn.decomposition import PCA"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GLmxowEO1Fh0","outputId":"d1686048-8c5a-4d76-cc8b-722b8952c736","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680597533331,"user_tz":-120,"elapsed":266,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1778, 96)"]},"metadata":{},"execution_count":19}],"source":["X_train.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jF24Rrek1Fh1"},"outputs":[],"source":["pca = PCA(n_components=2)\n","pca.fit(X_train)\n","X_pca = pca.transform(X_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PR0LHMDMVXyS","outputId":"5c186253-fbe4-4572-c0da-8e36bc01e20a","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1680597540956,"user_tz":-120,"elapsed":1333,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}}},"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36m_parse_scatter_color_args\u001b[0;34m(c, edgecolors, kwargs, xsize, get_next_color_func)\u001b[0m\n\u001b[1;32m   4438\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Is 'c' acceptable as PathCollection facecolors?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4439\u001b[0;31m                 \u001b[0mcolors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmcolors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_rgba_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4440\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/colors.py\u001b[0m in \u001b[0;36mto_rgba_array\u001b[0;34m(c, alpha)\u001b[0m\n\u001b[1;32m    486\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 487\u001b[0;31m         \u001b[0mrgba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mto_rgba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/colors.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    486\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 487\u001b[0;31m         \u001b[0mrgba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mto_rgba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/colors.py\u001b[0m in \u001b[0;36mto_rgba\u001b[0;34m(c, alpha)\u001b[0m\n\u001b[1;32m    298\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mrgba\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Suppress exception chaining of cache lookup failure.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 299\u001b[0;31m         \u001b[0mrgba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_to_rgba_no_colorcycle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    300\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/colors.py\u001b[0m in \u001b[0;36m_to_rgba_no_colorcycle\u001b[0;34m(c, alpha)\u001b[0m\n\u001b[1;32m    373\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0malpha\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;36m1.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 374\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Invalid RGBA argument: {orig_c!r}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    375\u001b[0m     \u001b[0;31m# turn 2-D array into 1-D array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid RGBA argument: 'speech'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-076329436aec>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mX_pca\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpca\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_res\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_pca\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_pca\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_res\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprism\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'k'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2860\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2861\u001b[0m         edgecolors=None, plotnonfinite=False, data=None, **kwargs):\n\u001b[0;32m-> 2862\u001b[0;31m     __ret = gca().scatter(\n\u001b[0m\u001b[1;32m   2863\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2864\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1440\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1442\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1444\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4600\u001b[0m             \u001b[0morig_edgecolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'edgecolor'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4601\u001b[0m         \u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolors\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4602\u001b[0;31m             self._parse_scatter_color_args(\n\u001b[0m\u001b[1;32m   4603\u001b[0m                 \u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4604\u001b[0m                 get_next_color_func=self._get_patches_for_fill.get_next_color)\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36m_parse_scatter_color_args\u001b[0;34m(c, edgecolors, kwargs, xsize, get_next_color_func)\u001b[0m\n\u001b[1;32m   4446\u001b[0m                     \u001b[0;31m# Both the mapping *and* the RGBA conversion failed: pretty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4447\u001b[0m                     \u001b[0;31m# severe failure => one may appreciate a verbose feedback.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4448\u001b[0;31m                     raise ValueError(\n\u001b[0m\u001b[1;32m   4449\u001b[0m                         \u001b[0;34mf\"'c' argument must be a color, a sequence of colors, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4450\u001b[0m                         f\"or a sequence of numbers, not {c!r}\") from err\n","\u001b[0;31mValueError\u001b[0m: 'c' argument must be a color, a sequence of colors, or a sequence of numbers, not 0       speech\n1       speech\n2       speech\n3       speech\n4       speech\n         ...  \n2071      song\n2072      song\n2073      song\n2074      song\n2075      song\nName: vocal_channel, Length: 2076, dtype: object"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["pca = PCA(n_components=2)\n","pca.fit(X_train)\n","X_pca = pca.transform(X_res)\n","\n","plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_res, cmap=plt.cm.prism, edgecolor='k', alpha=0.7)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1e_rTivxVXyS","outputId":"dd23e113-cd66-4f72-f4b0-19a593d474b5","colab":{"base_uri":"https://localhost:8080/","height":597},"executionInfo":{"status":"error","timestamp":1680597544746,"user_tz":-120,"elapsed":514,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy 0.8820598006644518\n","F1-score [0.87207207 0.89060092]\n","              precision    recall  f1-score   support\n","\n","        song       0.83      0.92      0.87       264\n","      speech       0.93      0.86      0.89       338\n","\n","    accuracy                           0.88       602\n","   macro avg       0.88      0.89      0.88       602\n","weighted avg       0.89      0.88      0.88       602\n","\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-71b6d0b72385>\u001b[0m in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0my_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mfpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroc_curve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_score\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0mroc_auc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mauc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_ranking.py\u001b[0m in \u001b[0;36mroc_curve\u001b[0;34m(y_true, y_score, pos_label, sample_weight, drop_intermediate)\u001b[0m\n\u001b[1;32m    990\u001b[0m     \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1.8\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;36m0.8\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;36m0.4\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;36m0.35\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.1\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    991\u001b[0m     \"\"\"\n\u001b[0;32m--> 992\u001b[0;31m     fps, tps, thresholds = _binary_clf_curve(\n\u001b[0m\u001b[1;32m    993\u001b[0m         \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpos_label\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpos_label\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    994\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_ranking.py\u001b[0m in \u001b[0;36m_binary_clf_curve\u001b[0;34m(y_true, y_score, pos_label, sample_weight)\u001b[0m\n\u001b[1;32m    764\u001b[0m         \u001b[0msample_weight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnonzero_weight_mask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 766\u001b[0;31m     \u001b[0mpos_label\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_pos_label_consistency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpos_label\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    767\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    768\u001b[0m     \u001b[0;31m# make y_true a boolean vector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_base.py\u001b[0m in \u001b[0;36m_check_pos_label_consistency\u001b[0;34m(pos_label, y_true)\u001b[0m\n\u001b[1;32m    241\u001b[0m     ):\n\u001b[1;32m    242\u001b[0m         \u001b[0mclasses_repr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\", \"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrepr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 243\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    244\u001b[0m             \u001b[0;34mf\"y_true takes value in {{{classes_repr}}} and pos_label is not \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    245\u001b[0m             \u001b[0;34m\"specified: either make y_true take value in {0, 1} or \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: y_true takes value in {'song', 'speech'} and pos_label is not specified: either make y_true take value in {0, 1} or {-1, 1} or pass pos_label explicitly."]}],"source":["clf = DecisionTreeClassifier(min_samples_leaf=3, random_state=42)\n","clf.fit(X_res, y_res)\n","\n","y_pred = clf.predict(X_test)\n","\n","print('Accuracy %s' % accuracy_score(y_test, y_pred))\n","print('F1-score %s' % f1_score(y_test, y_pred, average=None))\n","print(classification_report(y_test, y_pred))\n","\n","y_score = clf.predict_proba(X_test)\n","fpr, tpr, _ = roc_curve(y_test, y_score[:, 1])\n","roc_auc = auc(fpr, tpr)\n","\n","plt.plot(fpr0, tpr0, color='darkorange', lw=3, label='$AUC_0$ = %.3f' % (roc_auc0))\n","plt.plot(fpr, tpr, color='green', lw=3, label='$AUC_1$ = %.3f' % (roc_auc))\n","\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate', fontsize=16)\n","plt.ylabel('True Positive Rate', fontsize=16)\n","plt.title('ROC curve', fontsize=16)\n","plt.legend(loc=\"lower right\", fontsize=14, frameon=False)\n","plt.tick_params(axis='both', which='major', labelsize=16)\n","plt.show()"]},{"cell_type":"markdown","source":["##Tuning KNN"],"metadata":{"id":"EB98iNajN-UY"}},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV"],"metadata":{"id":"qwp5K2vkOAWb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier"],"metadata":{"id":"-eW86njzn9Yy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["grid_params = { 'n_neighbors' : [5,7,9,11,13,15],\n","               'weights' : ['uniform','distance'],\n","               'metric' : ['minkowski','euclidean','manhattan']}"],"metadata":{"id":"-38MoK-pnvMV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gs = GridSearchCV(KNeighborsClassifier(), grid_params, verbose = 1, cv=3, n_jobs = -1)"],"metadata":{"id":"5rqxg86Dnw-O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# fit the model on our train set\n","g_res = gs.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7E5Ysz-0n1mE","executionInfo":{"status":"ok","timestamp":1680597559393,"user_tz":-120,"elapsed":9115,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"96bf5b00-afac-451f-dc25-d916e961250f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 36 candidates, totalling 108 fits\n"]}]},{"cell_type":"code","source":["# get the hyperparameters with the best score\n","g_res.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ULEX6gQEoJAs","executionInfo":{"status":"ok","timestamp":1680597559394,"user_tz":-120,"elapsed":10,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"bd783ac4-43d3-4e81-f54f-0d92530fc40f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'uniform'}"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":[],"metadata":{"id":"R6cYMAJbOAlB"}},{"cell_type":"markdown","source":["##KNN"],"metadata":{"id":"JcphaMRcOBVt"}},{"cell_type":"code","source":["# use the best hyperparameters\n","knn = KNeighborsClassifier(n_neighbors = 15, weights = 'uniform',metric = 'manhattan')\n","knn.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"NUpcpdLMoPc4","executionInfo":{"status":"ok","timestamp":1680597571587,"user_tz":-120,"elapsed":257,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"48fa41ef-e26b-4bad-a16b-6ea95e2c8ebd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(metric='manhattan', n_neighbors=15)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(metric=&#x27;manhattan&#x27;, n_neighbors=15)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(metric=&#x27;manhattan&#x27;, n_neighbors=15)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# get a prediction\n","y_hat = knn.predict(X_train)\n","y_knn = knn.predict(X_test)"],"metadata":{"id":"y4jVcSSkoiMh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_knn))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QGLT8kjOoZTW","executionInfo":{"status":"ok","timestamp":1680597574729,"user_tz":-120,"elapsed":11,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"a4a4404d-bbe7-4e40-f9d6-271f2a49a950"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","        song       0.90      0.99      0.94       264\n","      speech       0.99      0.91      0.95       338\n","\n","    accuracy                           0.95       602\n","   macro avg       0.95      0.95      0.95       602\n","weighted avg       0.95      0.95      0.95       602\n","\n"]}]},{"cell_type":"markdown","source":["#Fit sull'oversampled dataset"],"metadata":{"id":"CXjzeM06bBCS"}},{"cell_type":"code","source":["# use the best hyperparameters\n","knn = KNeighborsClassifier(n_neighbors = 15, weights = 'uniform',metric = 'manhattan')\n","knn.fit(X_res, y_res)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1680597688514,"user_tz":-120,"elapsed":302,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"9dc06c92-556b-49a1-81b6-f7e736b87179","id":"gjZ0pjlLbAS0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(metric='manhattan', n_neighbors=15)"],"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(metric=&#x27;manhattan&#x27;, n_neighbors=15)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(metric=&#x27;manhattan&#x27;, n_neighbors=15)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["X_res.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WI7l_LAPcRu_","executionInfo":{"status":"ok","timestamp":1680597923411,"user_tz":-120,"elapsed":824,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"a426500e-a914-4d6a-f60b-e3237332197a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2076, 96)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# get a prediction\n","y_knn = knn.predict(X_test)\n","X_test.shape"],"metadata":{"executionInfo":{"status":"ok","timestamp":1680597909029,"user_tz":-120,"elapsed":1598,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"colab":{"base_uri":"https://localhost:8080/"},"id":"m25-yn4NbAS1","outputId":"329d0df2-9e3c-47e5-9f1e-5cc2a87a32c3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(602, 96)"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_knn))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680597871296,"user_tz":-120,"elapsed":8,"user":{"displayName":"Vincenzo Sammartino","userId":"06673375620852550665"}},"outputId":"6fbfee2b-9e14-4091-fee4-24781719d76e","id":"RzKdUjDsbAS2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","        song       0.78      1.00      0.87       264\n","      speech       1.00      0.78      0.87       338\n","\n","    accuracy                           0.87       602\n","   macro avg       0.89      0.89      0.87       602\n","weighted avg       0.90      0.87      0.87       602\n","\n"]}]}]}